{"version":3,"sources":["util/dataInterpreter.js","components/TextField.jsx","prototypes/FormField.js","util/ruleEngine.js","components/RenderFormFields.jsx","components/FormContainer.jsx","apis/request.js","components/AppContainer.jsx","reportWebVitals.js","index.js"],"names":["fieldDataMapGenerator","arr","obj","forEach","ele","uid","data_type","value","TextField","props","type","label","errorMessage","required","onChange","useState","defaultValue","setValue","isValid","checkValidation","fieldType","className","htmlFor","id","placeholder","e","target","onBlur","style","FormField","data","this","metadata","_metadata","ruleEngine","fieldUID","formData","formRule","formFieldDetail","operations","withValue","operandFieldUid","path","targetfielduid","result","operands","getValueFromPath","operand","operandValue","isNotEquals","isEquals","sourceData","pathMap","Array","isArray","split","key","RenderFormFields","formDataMap","formRuleMap","map","index","FormContainer","setFormData","setFormDataMap","setFormRuleMap","useEffect","formRules","dataMap","ruleMap","length","ruleMapGenerator","AppContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8c43b1a.chunk.js","sourcesContent":["export function fieldDataMapGenerator(arr, obj={}){\n\tarr.forEach(ele=>{\n\t\tobj[ele.uid] = ele.data_type === \"group\" ? fieldDataMapGenerator(ele.value, {}) : ele.value;\n  })\n  return obj;\n  /**\n   * sample output :\n   * {\n   *    first_name: \"Maulik\",\n   *    last_name:\"soni\",\n   *    email: \"mauliksoni37@gmail.com\",\n   *    age: \"26\",\n   *    education_group:{\n   *      jr_college: \"K. J. Somaiya Science and Commerce\",\n   *      sr_college: \"K. J. Somaiya College Engineering and Information Technology\"\n   *    },\n   *    address_group:{\n   *      residential_address: \"Ghatkopar, Mumbai\",\n   *      office_address: \"Kurla, Mumbai\"\n   *    },\n   *    contact_group:{\n   *      residential_phone: 21023904\n   *      mobile_phone_group: {\n   *        mobile_number_1: 0123456789\n   *        mobile_number_2: 9876543210\n   *      }\n   *    }\n   * }\n   * contact_group.mobile_phone_group.mobile_number_1\n   */\n}\n\nexport function ruleMapGenerator(arr){\n  const obj={};\n  arr.forEach(ele=>{\n  \tconst path = ele.targetfielduid.split(\".\")\n  \tconst key = path[path.length-1];\n  \tobj[key] = {...ele, ...{path}};\n  })\n  return obj;\n  /**\n   * sample output :\n   * {\n   *    office_address:{\n   *      \"targetfielduid\": \"address_group.office_address\", \n   *      \"operandFieldUid\": [ \n   *        \"address_group.residential_address\" \n   *      ], \n   *      \"operations\": \"notEqual\", \n   *      \"withValue\": \"Ghatkopar, Mumbai\" \n   *    }, \n   *    mobile_number_1:{ \n   *      \"targetfielduid\": \"contact_group.mobile_phone_group.mobile_number_1\", \n   *      \"operandFieldUid\": [ \n   *        \"contact_group.mobile_phone_group.mobile_number_2\" \n   *      ], \n   *      \"operations\": \"notEqual\", \n   *    }\n   * }\n   */\n}\n\n","import { useState } from \"react\";\n\nexport default function TextField(props){\n  const {\n    uid,\n    type = \"string\",\n    label,\n    errorMessage,\n    required=false,\n    onChange\n  } = props;\n\n  const [value, setValue] = useState(props.defaultValue || props.value || \"\");\n  const [isValid, checkValidation] = useState(true);\n\n  let fieldType = \"text\";\n\n  switch(type){\n    case \"number\":\n      fieldType = \"number\";\n      break;\n    case \"string\":\n    case \"text\":\n    default:\n      fieldType = \"text\";\n      break;\n  }\n\n  const onChangeHandler=(e)=>{\n    const value = e.target.value;\n    setValue(value);\n    onChange && onChange(value);\n    checkValidation(!!value);\n  }\n\n  const onBlurHandler=(e)=>{\n    const value = e.target.value;\n    checkValidation(!!value);\n  }\n\n  return(\n    <div className=\"col-sm-12 mb-3\">\n      <label htmlFor={uid}>{label}</label>\n      <input\n        id={uid}\n        className=\"form-control\"\n        type={fieldType} \n        placeholder={label}\n        value={value}\n        required={!!required}\n        onChange={onChangeHandler}\n        onBlur={onBlurHandler}\n      />\n      {errorMessage && <div className=\"invalid-feedback\" style={!isValid ? {\"display\": \"block\"} : {}}>\n        {errorMessage}\n      </div>}\n    </div>\n  )\n}","export default function FormField(data){\n  this.uid = data.uid;\n  this.label = data.label;\n  this.type = data.data_type;\n  this.defaultValue = data.value;\n  this.metadata = data._metadata;\n  const {required} = this.metadata || {};\n\n  if(required){\n    this.label = `${data.label}*`;\n    this.metadata[\"errorMessage\"] = `${data.label} is required field!`;\n  }\n}\n","export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  const {operations, withValue, path, operandFieldUid, targetfielduid} = formFieldDetail;\n\n  let result = true;\n  switch(operations){\n    case \"notEqual\":\n      result = isNotEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    case \"equal\":\n      result = isEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    default:\n      result = true\n      break;\n  }\n\n  return result;\n}\n\nfunction isEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  let result = true;\n  operands.forEach((operand)=>{\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && (operandValue === value);\n  })\n  return result;\n}\n\nfunction isNotEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  let result = true;\n  operands.forEach((operand)=>{\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && (operandValue !== value);\n  })\n  return result;\n}\n\nfunction getValueFromPath(path, sourceData = {}){\n  const pathMap = (Array.isArray(path) ? path : path.split(\".\")) || [];\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[key];\n  })\n  return value;\n}","import TextField from './TextField';\nimport FormField from '../prototypes/FormField';\nimport ruleEngine from \"./../util/ruleEngine\";\n\nexport default function RenderFormFields(props){\n  const {formData, formDataMap, formRuleMap} = props;\n  return (\n    <>\n      {\n        formData.map((data, index) => {\n          if(Array.isArray(data.value) && data.data_type === \"group\"){\n            return <RenderFormFields key={index} formData={data.value} formDataMap={formDataMap} formRuleMap={formRuleMap}/>\n          }else{\n            const {uid, label, type, defaultValue, metadata} = new FormField(data);\n            let isFieldVisible = formRuleMap[uid] ? ruleEngine(uid, formDataMap, formRuleMap) : true;\n\n            return (isFieldVisible ? <TextField\n              key={`${uid}_${index}`}\n              {...{uid, label, type, defaultValue}}\n              {...metadata}\n            /> : null);\n          }\n        })\n      }\n    </>\n  )\n}","import { useEffect, useState } from 'react';\nimport {getFormData, getFormRules} from './../apis/request';\nimport {fieldDataMapGenerator, ruleMapGenerator} from './../util/dataInterpreter';\nimport RenderFormFields from './RenderFormFields';\n\nexport default function FormContainer() {\n  const [formData, setFormData] = useState([]);\n  const [formDataMap, setFormDataMap] = useState([]);\n  const [formRuleMap, setFormRuleMap] = useState([]);\n\n  useEffect(()=>{\n    const data = getFormData();\n    const formRules = getFormRules();\n\n    const dataMap = fieldDataMapGenerator(data);\n    const ruleMap = ruleMapGenerator(formRules);\n\n    setFormData(data);\n    setFormDataMap(dataMap);\n    setFormRuleMap(ruleMap)\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-12\">\n        <form className=\"needs-validation\">\n          <div className=\"form-row\">\n            <RenderFormFields formData={formData} formDataMap={formDataMap} formRuleMap={formRuleMap}/>\n          </div>\n          <button className=\"btn btn-primary\" type=\"submit\">Submit form</button>\n        </form>\n      </div>\n    </div>\n  );\n}","export function getFormData() {\n  return  [\n    {\n      \"uid\": \"first_name\",\n      \"data_type\": \"string\",\n      \"label\": \"First Name\",\n      \"value\": \"Maulik\",\n      \"_metadata\": {\n        \"required\": true\n      }\n    },\n    {\n      \"uid\": \"last_name\",\n      \"data_type\": \"string\",\n      \"label\": \"Last Name\",\n      \"value\": \"Soni\",\n      \"_metadata\": {\n        \"required\": true\n      }\n    },\n    {\n      \"uid\": \"email\",\n      \"data_type\": \"string\",\n      \"label\": \"Email Address\",\n      \"value\": \"mauliksoni37@gmail.com\",\n      \"_metadata\": {\n        \"required\": true\n      }\n    },\n    {\n      \"uid\": \"age\",\n      \"label\": \"Age\",\n      \"data_type\": \"number\",\n      \"value\": 26\n    },\n    {\n      \"uid\": \"education_group\",\n      \"label\": \"Education Details\",\n      \"data_type\": \"group\",\n      \"value\": [\n        {\n          \"uid\": \"jr_college\",\n          \"data_type\": \"string\",\n          \"label\": \"Junior College\",\n          \"value\": \"K. J. Somaiya Science and Commerce\"\n        },\n        {\n          \"uid\": \"sr_college\",\n          \"data_type\": \"string\",\n          \"label\": \"Degree College\",\n          \"value\": \"K. J. Somaiya College Engineering and Information Technology\"\n        }\n      ]\n    },\n    {\n      \"uid\": \"address_group\",\n      \"label\": \"Address\",\n      \"data_type\": \"group\",\n      \"value\": [\n        {\n          \"uid\": \"residential_address\",\n          \"data_type\": \"string\",\n          \"label\": \"Residential Address\",\n          \"value\": \"Ghatkopar, Mumbai\"\n        },\n        {\n          \"uid\": \"office_address\",\n          \"data_type\": \"string\",\n          \"label\": \"Office Address\",\n          \"value\": \"Kurla, Mumbai\"\n        }\n      ]\n    },\n    {\n      \"uid\": \"contact_group\",\n      \"label\": \"Contact Numbers\",\n      \"data_type\": \"group\",\n      \"value\": [\n        {\n          \"uid\": \"residential_phone\",\n          \"data_type\": \"number\",\n          \"label\": \"Residential Phone Number\",\n          \"value\": 21023904\n        },\n        {\n          \"uid\": \"mobile_phone_group\",\n          \"data_type\": \"group\",\n          \"label\": \"Mobile Number\",\n          \"value\": [\n            {\n              \"uid\": \"mobile_number_1\",\n              \"data_type\": \"number\",\n              \"label\": \"Mobile Number 1\",\n              \"value\": 123456\n            },\n            {\n              \"uid\": \"mobile_number_2\",\n              \"data_type\": \"number\",\n              \"label\": \"Mobile Number 2\",\n              \"value\": 987654\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\nexport function getFormRules() {\n  return [\n    {\n      \"targetfielduid\": \"address_group.office_address\",\n      \"operandFieldUid\": [\n        \"address_group.residential_address\"\n      ],\n      \"operations\": \"notEqual\",\n      \"withValue\": \"Kurla, Mumbai\"\n    },\n    {\n      \"targetfielduid\": \"contact_group.mobile_phone_group.mobile_number_1\",\n      \"operandFieldUid\": [\n        \"contact_group.mobile_phone_group.mobile_number_2\"\n      ],\n      \"operations\": \"notEqual\",\n    }\n  ];\n}\n\n","import FormContainer from \"./FormContainer\";\n\nfunction AppContainer() {\n  return (\n    <div className=\"container\">\n      <FormContainer/>\n    </div>\n  );\n}\n\nexport default AppContainer;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './components/AppContainer';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}