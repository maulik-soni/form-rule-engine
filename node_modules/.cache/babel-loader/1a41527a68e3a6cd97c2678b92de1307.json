{"ast":null,"code":"export default function ruleEngine(fieldUID, formData, formRule) {\n  const formFieldDetail = formRule[fieldUID];\n  const {\n    operations,\n    withValue,\n    path,\n    operandFieldUid,\n    targetfielduid\n  } = formFieldDetail;\n  let result = true;\n\n  switch (operations) {\n    case \"notEqual\":\n      result = isNotEquals(formData, targetfielduid, operandFieldUid, withValue);\n      break;\n\n    case \"equal\":\n      result = isEquals(formData, targetfielduid, operandFieldUid, withValue);\n      break;\n\n    default:\n      result = true;\n      break;\n  }\n\n  return result;\n}\n\nfunction isEquals(formData, target, operands, withValue) {\n  const value = withValue || getValueFromPath(target, formData);\n  let result = true;\n  operands.forEach(operand => {\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && operandValue === value;\n  });\n  return result;\n}\n\nfunction isNotEquals(formData, target, operands, withValue) {\n  const value = withValue || getValueFromPath(target, formData);\n  let result = true;\n  operands.forEach(operand => {\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && operandValue !== value;\n  });\n  return result;\n}\n\nfunction getValueFromPath(path, sourceData = {}) {\n  const pathMap = (Array.isArray(path) ? path : path.split(\".\")) || [];\n  let value = sourceData;\n  pathMap.forEach(key => {\n    value = value[key];\n  });\n  return value;\n}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/util/ruleEngine.js"],"names":["ruleEngine","fieldUID","formData","formRule","formFieldDetail","operations","withValue","path","operandFieldUid","targetfielduid","result","isNotEquals","isEquals","target","operands","value","getValueFromPath","forEach","operand","operandValue","sourceData","pathMap","Array","isArray","split","key"],"mappings":"AAAA,eAAe,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAiD;AAC9D,QAAMC,eAAe,GAAGD,QAAQ,CAACF,QAAD,CAAhC;AACA,QAAM;AAACI,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA,eAA9B;AAA+CC,IAAAA;AAA/C,MAAiEL,eAAvE;AAEA,MAAIM,MAAM,GAAG,IAAb;;AACA,UAAOL,UAAP;AACE,SAAK,UAAL;AACEK,MAAAA,MAAM,GAAGC,WAAW,CAACT,QAAD,EAAWO,cAAX,EAA2BD,eAA3B,EAA4CF,SAA5C,CAApB;AACA;;AACF,SAAK,OAAL;AACEI,MAAAA,MAAM,GAAGE,QAAQ,CAACV,QAAD,EAAWO,cAAX,EAA2BD,eAA3B,EAA4CF,SAA5C,CAAjB;AACA;;AACF;AACEI,MAAAA,MAAM,GAAG,IAAT;AACA;AATJ;;AAYA,SAAOA,MAAP;AACD;;AAED,SAASE,QAAT,CAAkBV,QAAlB,EAA4BW,MAA5B,EAAoCC,QAApC,EAA8CR,SAA9C,EAAwD;AACtD,QAAMS,KAAK,GAAGT,SAAS,IAAIU,gBAAgB,CAACH,MAAD,EAASX,QAAT,CAA3C;AACA,MAAIQ,MAAM,GAAG,IAAb;AACAI,EAAAA,QAAQ,CAACG,OAAT,CAAkBC,OAAD,IAAW;AAC1B,UAAMC,YAAY,GAAGH,gBAAgB,CAACE,OAAD,EAAUhB,QAAV,CAArC;AACAQ,IAAAA,MAAM,GAAGA,MAAM,IAAKS,YAAY,KAAKJ,KAArC;AACD,GAHD;AAIA,SAAOL,MAAP;AACD;;AAED,SAASC,WAAT,CAAqBT,QAArB,EAA+BW,MAA/B,EAAuCC,QAAvC,EAAiDR,SAAjD,EAA2D;AACzD,QAAMS,KAAK,GAAGT,SAAS,IAAIU,gBAAgB,CAACH,MAAD,EAASX,QAAT,CAA3C;AACA,MAAIQ,MAAM,GAAG,IAAb;AACAI,EAAAA,QAAQ,CAACG,OAAT,CAAkBC,OAAD,IAAW;AAC1B,UAAMC,YAAY,GAAGH,gBAAgB,CAACE,OAAD,EAAUhB,QAAV,CAArC;AACAQ,IAAAA,MAAM,GAAGA,MAAM,IAAKS,YAAY,KAAKJ,KAArC;AACD,GAHD;AAIA,SAAOL,MAAP;AACD;;AAED,SAASM,gBAAT,CAA0BT,IAA1B,EAAgCa,UAAU,GAAG,EAA7C,EAAgD;AAC9C,QAAMC,OAAO,GAAG,CAACC,KAAK,CAACC,OAAN,CAAchB,IAAd,IAAsBA,IAAtB,GAA6BA,IAAI,CAACiB,KAAL,CAAW,GAAX,CAA9B,KAAkD,EAAlE;AACA,MAAIT,KAAK,GAAGK,UAAZ;AACAC,EAAAA,OAAO,CAACJ,OAAR,CAAgBQ,GAAG,IAAE;AACnBV,IAAAA,KAAK,GAAGA,KAAK,CAACU,GAAD,CAAb;AACD,GAFD;AAGA,SAAOV,KAAP;AACD","sourcesContent":["export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  const {operations, withValue, path, operandFieldUid, targetfielduid} = formFieldDetail;\n\n  let result = true;\n  switch(operations){\n    case \"notEqual\":\n      result = isNotEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    case \"equal\":\n      result = isEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    default:\n      result = true\n      break;\n  }\n\n  return result;\n}\n\nfunction isEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  let result = true;\n  operands.forEach((operand)=>{\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && (operandValue === value);\n  })\n  return result;\n}\n\nfunction isNotEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  let result = true;\n  operands.forEach((operand)=>{\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && (operandValue !== value);\n  })\n  return result;\n}\n\nfunction getValueFromPath(path, sourceData = {}){\n  const pathMap = (Array.isArray(path) ? path : path.split(\".\")) || [];\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[key];\n  })\n  return value;\n}"]},"metadata":{},"sourceType":"module"}