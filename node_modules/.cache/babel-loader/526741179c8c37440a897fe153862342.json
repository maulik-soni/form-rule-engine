{"ast":null,"code":"export default function ruleEngine(fieldUID, formData, formRule) {\n  const formFieldDetail = formRule[fieldUID];\n  const {\n    operations,\n    withValue,\n    path,\n    operandFieldUid,\n    targetfielduid\n  } = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData); // console.log({targetfielduid, operations, withValue, operandFieldUid});\n\n  let result = true; // console.log({formData, targetfielduid, operandFieldUid, withValue})\n\n  switch (operations) {\n    case \"notEqual\":\n      result = isNotEquals(formData, targetfielduid, operandFieldUid, withValue);\n      break;\n\n    case \"equal\":\n      result = isEquals(formData, targetfielduid, operandFieldUid, withValue);\n      break;\n\n    default:\n      result = true;\n      break;\n  }\n\n  return result;\n}\n\nfunction isEquals(formData, target, operands, withValue) {\n  const value = withValue || getValueFromPath(target, formData);\n  const result = operands.reduce((a, operand) => {\n    return !!(operand === value && a);\n  });\n  return result;\n}\n\nfunction isNotEquals(formData, target, operands, withValue) {\n  const value = withValue || getValueFromPath(target, formData);\n  const result = true;\n  operands.forEach(operand => {\n    const operandValue = getValueFromPath(operand, formData);\n    console.log({\n      operandValue\n    });\n    result = operandValue !== value;\n  });\n  return result;\n}\n\nfunction getValueFromPath(path, sourceData) {\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key => {\n    value = value[key];\n  });\n  return value;\n}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/util/ruleEngine.js"],"names":["ruleEngine","fieldUID","formData","formRule","formFieldDetail","operations","withValue","path","operandFieldUid","targetfielduid","targetValue","getValueFromPath","result","isNotEquals","isEquals","target","operands","value","reduce","a","operand","forEach","operandValue","console","log","sourceData","pathMap","Array","isArray","split","key"],"mappings":"AAAA,eAAe,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAiD;AAC9D,QAAMC,eAAe,GAAGD,QAAQ,CAACF,QAAD,CAAhC;AACA,QAAM;AAACI,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA,eAA9B;AAA+CC,IAAAA;AAA/C,MAAiEL,eAAvE;AACA,QAAMM,WAAW,GAAGC,gBAAgB,CAACJ,IAAD,EAAOL,QAAP,CAApC,CAH8D,CAI9D;;AACA,MAAIU,MAAM,GAAG,IAAb,CAL8D,CAM9D;;AAEA,UAAOP,UAAP;AACE,SAAK,UAAL;AACEO,MAAAA,MAAM,GAAGC,WAAW,CAACX,QAAD,EAAWO,cAAX,EAA2BD,eAA3B,EAA4CF,SAA5C,CAApB;AACA;;AACF,SAAK,OAAL;AACEM,MAAAA,MAAM,GAAGE,QAAQ,CAACZ,QAAD,EAAWO,cAAX,EAA2BD,eAA3B,EAA4CF,SAA5C,CAAjB;AACA;;AACF;AACEM,MAAAA,MAAM,GAAG,IAAT;AACA;AATJ;;AAYA,SAAOA,MAAP;AACD;;AAED,SAASE,QAAT,CAAkBZ,QAAlB,EAA4Ba,MAA5B,EAAoCC,QAApC,EAA8CV,SAA9C,EAAwD;AACtD,QAAMW,KAAK,GAAGX,SAAS,IAAIK,gBAAgB,CAACI,MAAD,EAASb,QAAT,CAA3C;AACA,QAAMU,MAAM,GAAGI,QAAQ,CAACE,MAAT,CAAgB,CAACC,CAAD,EAAIC,OAAJ,KAAc;AAC3C,WAAO,CAAC,EAAGA,OAAO,KAAKH,KAAb,IAAuBE,CAAzB,CAAR;AACD,GAFc,CAAf;AAGA,SAAOP,MAAP;AACD;;AAED,SAASC,WAAT,CAAqBX,QAArB,EAA+Ba,MAA/B,EAAuCC,QAAvC,EAAiDV,SAAjD,EAA2D;AACzD,QAAMW,KAAK,GAAGX,SAAS,IAAIK,gBAAgB,CAACI,MAAD,EAASb,QAAT,CAA3C;AACA,QAAMU,MAAM,GAAG,IAAf;AACAI,EAAAA,QAAQ,CAACK,OAAT,CAAkBD,OAAD,IAAW;AAC1B,UAAME,YAAY,GAAGX,gBAAgB,CAACS,OAAD,EAAUlB,QAAV,CAArC;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,MAAAA;AAAD,KAAZ;AACAV,IAAAA,MAAM,GAAGU,YAAY,KAAKL,KAA1B;AACD,GAJD;AAKA,SAAOL,MAAP;AACD;;AAED,SAASD,gBAAT,CAA0BJ,IAA1B,EAAgCkB,UAAhC,EAA2C;AACzC,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcrB,IAAd,IAAsBA,IAAtB,GAA6BA,IAAI,CAACsB,KAAL,CAAW,GAAX,CAA7C;AACA,MAAIZ,KAAK,GAAGQ,UAAZ;AACAC,EAAAA,OAAO,CAACL,OAAR,CAAgBS,GAAG,IAAE;AACnBb,IAAAA,KAAK,GAAGA,KAAK,CAACa,GAAD,CAAb;AACD,GAFD;AAGA,SAAOb,KAAP;AACD","sourcesContent":["export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  const {operations, withValue, path, operandFieldUid, targetfielduid} = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  // console.log({targetfielduid, operations, withValue, operandFieldUid});\n  let result = true;\n  // console.log({formData, targetfielduid, operandFieldUid, withValue})\n\n  switch(operations){\n    case \"notEqual\":\n      result = isNotEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    case \"equal\":\n      result = isEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    default:\n      result = true\n      break;\n  }\n\n  return result;\n}\n\nfunction isEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  const result = operands.reduce((a, operand)=>{\n    return !!((operand === value) && a);\n  })\n  return result;\n}\n\nfunction isNotEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  const result = true;\n  operands.forEach((operand)=>{\n    const operandValue = getValueFromPath(operand, formData);\n    console.log({operandValue});\n    result = operandValue !== value;\n  })\n  return result;\n}\n\nfunction getValueFromPath(path, sourceData){\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[key];\n  })\n  return value;\n}"]},"metadata":{},"sourceType":"module"}