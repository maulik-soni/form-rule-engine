{"ast":null,"code":"export default function ruleEngine(fieldUID, formData, formRule) {\n  const formFieldDetail = formRule[fieldUID];\n  const {\n    operations,\n    withValue,\n    path,\n    operandFieldUid,\n    targetfielduid\n  } = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData); // console.log({targetfielduid, operations, withValue, operandFieldUid});\n\n  let result = true;\n\n  switch (operations) {\n    case \"notEqual\":\n      result = isNotEquals(targetfielduid, operandFieldUid, withValue);\n      break;\n\n    case \"equal\":\n      result = isEquals(targetfielduid, operandFieldUid, withValue);\n      break;\n\n    default:\n      result = true;\n      break;\n  }\n\n  return true;\n}\n\nfunction isEquals(target, operand, withValue) {\n  console.log(target, operand, withValue);\n}\n\nfunction isNotEquals(target, operand, withValue) {\n  console.log(target, operand, withValue);\n}\n\nfunction getValueFromPath(path, sourceData) {\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key => {\n    value = value[key];\n  });\n  return value;\n}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/util/ruleEngine.js"],"names":["ruleEngine","fieldUID","formData","formRule","formFieldDetail","operations","withValue","path","operandFieldUid","targetfielduid","targetValue","getValueFromPath","result","isNotEquals","isEquals","target","operand","console","log","sourceData","pathMap","Array","isArray","split","value","forEach","key"],"mappings":"AAAA,eAAe,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAiD;AAC9D,QAAMC,eAAe,GAAGD,QAAQ,CAACF,QAAD,CAAhC;AACA,QAAM;AAACI,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA,eAA9B;AAA+CC,IAAAA;AAA/C,MAAiEL,eAAvE;AACA,QAAMM,WAAW,GAAGC,gBAAgB,CAACJ,IAAD,EAAOL,QAAP,CAApC,CAH8D,CAI9D;;AAEA,MAAIU,MAAM,GAAG,IAAb;;AAEA,UAAOP,UAAP;AACE,SAAK,UAAL;AACEO,MAAAA,MAAM,GAAGC,WAAW,CAACJ,cAAD,EAAiBD,eAAjB,EAAkCF,SAAlC,CAApB;AACA;;AACF,SAAK,OAAL;AACEM,MAAAA,MAAM,GAAGE,QAAQ,CAACL,cAAD,EAAiBD,eAAjB,EAAkCF,SAAlC,CAAjB;AACA;;AACF;AACEM,MAAAA,MAAM,GAAG,IAAT;AACA;AATJ;;AAYA,SAAO,IAAP;AACD;;AAED,SAASE,QAAT,CAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCV,SAAnC,EAA6C;AAC3CW,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoBC,OAApB,EAA6BV,SAA7B;AACD;;AAED,SAASO,WAAT,CAAqBE,MAArB,EAA6BC,OAA7B,EAAsCV,SAAtC,EAAgD;AAC9CW,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoBC,OAApB,EAA6BV,SAA7B;AACD;;AAED,SAASK,gBAAT,CAA0BJ,IAA1B,EAAgCY,UAAhC,EAA2C;AACzC,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcf,IAAd,IAAsBA,IAAtB,GAA6BA,IAAI,CAACgB,KAAL,CAAW,GAAX,CAA7C;AACA,MAAIC,KAAK,GAAGL,UAAZ;AACAC,EAAAA,OAAO,CAACK,OAAR,CAAgBC,GAAG,IAAE;AACnBF,IAAAA,KAAK,GAAGA,KAAK,CAACE,GAAD,CAAb;AACD,GAFD;AAGA,SAAOF,KAAP;AACD","sourcesContent":["export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  const {operations, withValue, path, operandFieldUid, targetfielduid} = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  // console.log({targetfielduid, operations, withValue, operandFieldUid});\n\n  let result = true;\n\n  switch(operations){\n    case \"notEqual\":\n      result = isNotEquals(targetfielduid, operandFieldUid, withValue)\n      break;\n    case \"equal\":\n      result = isEquals(targetfielduid, operandFieldUid, withValue)\n      break;\n    default:\n      result = true\n      break;\n  }\n\n  return true;\n}\n\nfunction isEquals(target, operand, withValue){\n  console.log(target, operand, withValue)\n}\n\nfunction isNotEquals(target, operand, withValue){\n  console.log(target, operand, withValue)\n}\n\nfunction getValueFromPath(path, sourceData){\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[key];\n  })\n  return value;\n}"]},"metadata":{},"sourceType":"module"}