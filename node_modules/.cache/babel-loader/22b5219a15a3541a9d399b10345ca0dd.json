{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mauliksoni/Documents/maulik/my-app/src/components/RenderFormFields.jsx\";\nimport TextField from './TextField';\nimport FormField from '../prototypes/FormField';\nimport ruleEngine from \"./../util/ruleEngine\";\nexport default function RenderFormFields(props) {\n  const {\n    formData,\n    formDataMap,\n    formRuleMap\n  } = props;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: formData.map((data, index) => {\n      if (Array.isArray(data.value) && data.data_type === \"group\") {\n        return /*#__PURE__*/_jsxDEV(RenderFormFields, {\n          formData: data.value,\n          formDataMap: formDataMap,\n          formRuleMap: formRuleMap\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 20\n        }, this);\n      } else {\n        const {\n          uid,\n          label,\n          type,\n          defaultValue,\n          metadata\n        } = new FormField(data);\n        let isFieldVisible = formRuleMap[uid] ? ruleEngine(uid, formDataMap, formRuleMap) : true;\n        console.log({\n          isFieldVisible,\n          uid\n        });\n        return isFieldVisible ? /*#__PURE__*/_jsxDEV(TextField, { ...{\n            uid,\n            label,\n            type,\n            defaultValue\n          },\n          ...metadata\n        }, `${uid}_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 38\n        }, this) : null;\n      }\n    })\n  }, void 0, false);\n}\n_c = RenderFormFields;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderFormFields\");","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/components/RenderFormFields.jsx"],"names":["TextField","FormField","ruleEngine","RenderFormFields","props","formData","formDataMap","formRuleMap","map","data","index","Array","isArray","value","data_type","uid","label","type","defaultValue","metadata","isFieldVisible","console","log"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAEA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AAC7C,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAuCH,KAA7C;AACA,sBACE;AAAA,cAEIC,QAAQ,CAACG,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B,UAAGC,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACI,KAAnB,KAA6BJ,IAAI,CAACK,SAAL,KAAmB,OAAnD,EAA2D;AACzD,4BAAO,QAAC,gBAAD;AAA8B,UAAA,QAAQ,EAAEL,IAAI,CAACI,KAA7C;AAAoD,UAAA,WAAW,EAAEP,WAAjE;AAA8E,UAAA,WAAW,EAAEC;AAA3F,WAAuBG,KAAvB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFD,MAEK;AACH,cAAM;AAACK,UAAAA,GAAD;AAAMC,UAAAA,KAAN;AAAaC,UAAAA,IAAb;AAAmBC,UAAAA,YAAnB;AAAiCC,UAAAA;AAAjC,YAA6C,IAAIlB,SAAJ,CAAcQ,IAAd,CAAnD;AACA,YAAIW,cAAc,GAAGb,WAAW,CAACQ,GAAD,CAAX,GAAmBb,UAAU,CAACa,GAAD,EAAMT,WAAN,EAAmBC,WAAnB,CAA7B,GAA+D,IAApF;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,UAAAA,cAAD;AAAiBL,UAAAA;AAAjB,SAAZ;AACA,eAAQK,cAAc,gBAAG,QAAC,SAAD,OAEnB;AAACL,YAAAA,GAAD;AAAMC,YAAAA,KAAN;AAAaC,YAAAA,IAAb;AAAmBC,YAAAA;AAAnB,WAFmB;AAAA,aAGnBC;AAHmB,WACjB,GAAEJ,GAAI,IAAGL,KAAM,EADE;AAAA;AAAA;AAAA;AAAA,gBAAH,GAIjB,IAJL;AAKD;AACF,KAbD;AAFJ,mBADF;AAoBD;KAtBuBP,gB","sourcesContent":["import TextField from './TextField';\nimport FormField from '../prototypes/FormField';\nimport ruleEngine from \"./../util/ruleEngine\";\n\nexport default function RenderFormFields(props){\n  const {formData, formDataMap, formRuleMap} = props;\n  return (\n    <>\n      {\n        formData.map((data, index) => {\n          if(Array.isArray(data.value) && data.data_type === \"group\"){\n            return <RenderFormFields key={index} formData={data.value} formDataMap={formDataMap} formRuleMap={formRuleMap}/>\n          }else{\n            const {uid, label, type, defaultValue, metadata} = new FormField(data);\n            let isFieldVisible = formRuleMap[uid] ? ruleEngine(uid, formDataMap, formRuleMap) : true;\n            console.log({isFieldVisible, uid});\n            return (isFieldVisible ? <TextField\n              key={`${uid}_${index}`}\n              {...{uid, label, type, defaultValue}}\n              {...metadata}\n            /> : null);\n          }\n        })\n      }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}