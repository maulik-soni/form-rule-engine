{"ast":null,"code":"export default function ruleEngine(fieldUID, formData, formRule) {\n  const formFieldDetail = formRule[fieldUID];\n  console.log(formFieldDetail);\n  const {\n    operations,\n    withValue,\n    targetfielduid,\n    path\n  } = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  console.log(targetValue);\n  return true;\n}\n\nfunction getValueFromPath(path, sourceData) {\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key => {\n    value = value[ele];\n  });\n  return value;\n}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/util/ruleEngine.js"],"names":["ruleEngine","fieldUID","formData","formRule","formFieldDetail","console","log","operations","withValue","targetfielduid","path","targetValue","getValueFromPath","sourceData","pathMap","Array","isArray","split","value","forEach","key","ele"],"mappings":"AAAA,eAAe,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAiD;AAC9D,QAAMC,eAAe,GAAGD,QAAQ,CAACF,QAAD,CAAhC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AACA,QAAM;AAACG,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,cAAxB;AAAwCC,IAAAA;AAAxC,MAAgDN,eAAtD;AACA,QAAMO,WAAW,GAAGC,gBAAgB,CAACF,IAAD,EAAOR,QAAP,CAApC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;AACA,SAAO,IAAP;AACD;;AAED,SAASC,gBAAT,CAA0BF,IAA1B,EAAgCG,UAAhC,EAA2C;AACzC,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcN,IAAd,IAAsBA,IAAtB,GAA6BA,IAAI,CAACO,KAAL,CAAW,GAAX,CAA7C;AACA,MAAIC,KAAK,GAAGL,UAAZ;AACAC,EAAAA,OAAO,CAACK,OAAR,CAAgBC,GAAG,IAAE;AACnBF,IAAAA,KAAK,GAAGA,KAAK,CAACG,GAAD,CAAb;AACD,GAFD;AAGA,SAAOH,KAAP;AACD","sourcesContent":["export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  console.log(formFieldDetail);\n  const {operations, withValue, targetfielduid, path} = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  console.log(targetValue);\n  return true;\n}\n\nfunction getValueFromPath(path, sourceData){\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[ele];\n  })\n  return value;\n}"]},"metadata":{},"sourceType":"module"}