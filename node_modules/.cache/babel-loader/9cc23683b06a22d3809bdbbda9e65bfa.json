{"ast":null,"code":"export default function ruleEngine(fieldUID, formData, formRule) {\n  const formFieldDetail = formRule[fieldUID];\n  const {\n    operations,\n    withValue,\n    path,\n    opernadFieldUid\n  } = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  console.log({\n    formFieldDetail,\n    operations,\n    withValue,\n    opernadFieldUid\n  });\n  let result = true;\n\n  switch (operations) {\n    case \"notEqual\":\n      result = isNotEquals();\n      break;\n\n    case \"equal\":\n      result = isEquals();\n      break;\n\n    default:\n      result = true;\n      break;\n  }\n\n  return true;\n}\n\nfunction isEquals(target, operand, withValue) {}\n\nfunction isNotEquals(target, operand, withValue) {}\n\nfunction getValueFromPath(path, sourceData) {\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key => {\n    value = value[key];\n  });\n  return value;\n}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/util/ruleEngine.js"],"names":["ruleEngine","fieldUID","formData","formRule","formFieldDetail","operations","withValue","path","opernadFieldUid","targetValue","getValueFromPath","console","log","result","isNotEquals","isEquals","target","operand","sourceData","pathMap","Array","isArray","split","value","forEach","key"],"mappings":"AAAA,eAAe,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAiD;AAC9D,QAAMC,eAAe,GAAGD,QAAQ,CAACF,QAAD,CAAhC;AACA,QAAM;AAACI,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA;AAA9B,MAAiDJ,eAAvD;AACA,QAAMK,WAAW,GAAGC,gBAAgB,CAACH,IAAD,EAAOL,QAAP,CAApC;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACR,IAAAA,eAAD;AAAkBC,IAAAA,UAAlB;AAA8BC,IAAAA,SAA9B;AAAyCE,IAAAA;AAAzC,GAAZ;AAEA,MAAIK,MAAM,GAAG,IAAb;;AAEA,UAAOR,UAAP;AACE,SAAK,UAAL;AACEQ,MAAAA,MAAM,GAAGC,WAAW,EAApB;AACA;;AACF,SAAK,OAAL;AACED,MAAAA,MAAM,GAAGE,QAAQ,EAAjB;AACA;;AACF;AACEF,MAAAA,MAAM,GAAG,IAAT;AACA;AATJ;;AAYA,SAAO,IAAP;AACD;;AAED,SAASE,QAAT,CAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCX,SAAnC,EAA6C,CAE5C;;AAED,SAASQ,WAAT,CAAqBE,MAArB,EAA6BC,OAA7B,EAAsCX,SAAtC,EAAgD,CAE/C;;AAED,SAASI,gBAAT,CAA0BH,IAA1B,EAAgCW,UAAhC,EAA2C;AACzC,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcd,IAAd,IAAsBA,IAAtB,GAA6BA,IAAI,CAACe,KAAL,CAAW,GAAX,CAA7C;AACA,MAAIC,KAAK,GAAGL,UAAZ;AACAC,EAAAA,OAAO,CAACK,OAAR,CAAgBC,GAAG,IAAE;AACnBF,IAAAA,KAAK,GAAGA,KAAK,CAACE,GAAD,CAAb;AACD,GAFD;AAGA,SAAOF,KAAP;AACD","sourcesContent":["export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  const {operations, withValue, path, opernadFieldUid} = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  console.log({formFieldDetail, operations, withValue, opernadFieldUid});\n\n  let result = true;\n\n  switch(operations){\n    case \"notEqual\":\n      result = isNotEquals()\n      break;\n    case \"equal\":\n      result = isEquals()\n      break;\n    default:\n      result = true\n      break;\n  }\n\n  return true;\n}\n\nfunction isEquals(target, operand, withValue){\n    \n}\n\nfunction isNotEquals(target, operand, withValue){\n  \n}\n\nfunction getValueFromPath(path, sourceData){\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[key];\n  })\n  return value;\n}"]},"metadata":{},"sourceType":"module"}