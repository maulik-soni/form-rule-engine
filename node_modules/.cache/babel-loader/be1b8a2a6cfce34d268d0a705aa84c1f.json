{"ast":null,"code":"export function fieldDataMapGenerator(arr, obj = {}) {\n  arr.forEach(ele => {\n    obj[ele.uid] = ele.data_type === \"group\" ? dynamicObjectGenerator(ele.value, {}) : ele.value;\n  });\n  return obj;\n  /**\n   * sample output :\n   * {\n   *    first_name: \"Maulik\",\n   *    last_name:\"soni\",\n   *    email: \"mauliksoni37@gmail.com\",\n   *    age: \"26\",\n   *    education_group:{\n   *      jr_college: \"K. J. Somaiya Science and Commerce\",\n   *      sr_college: \"K. J. Somaiya College Engineering and Information Technology\"\n   *    },\n   *    address_group:{\n   *      residential_address: \"Ghatkopar, Mumbai\",\n   *      office_address: \"Kurla, Mumbai\"\n   *    },\n   *    contact_group:{\n   *      residential_phone: 21023904\n   *      mobile_phone_group: {\n   *        mobile_number_1: 0123456789\n   *        mobile_number_2: 9876543210\n   *      }\n   *    }\n   * }\n   * contact_group.mobile_phone_group.mobile_number_1\n   */\n}\nexport function ruleMapGenerator() {\n  const obj = {};\n  arr.forEach(ele => {\n    const path = ele.targetfielduid.split(\".\");\n    const key = path[path.length - 1];\n    obj[key] = { ...ele,\n      ...{\n        path\n      }\n    };\n  });\n  return obj;\n  /**\n   * sample output :\n   * {\n   *    office_address:{\n   *      \"targetfielduid\": \"address_group.office_address\", \n   *      \"opernadFieldUid\": [ \n   *        \"address_group.residential_address\" \n   *      ], \n   *      \"operations\": \"notEqual\", \n   *      \"withValue\": \"Ghatkopar, Mumbai\" \n   *    }, \n   *    mobile_number_1:{ \n   *      \"targetfielduid\": \"contact_group.mobile_phone_group.mobile_number_1\", \n   *      \"opernadFieldUid\": [ \n   *        \"contact_group.mobile_phone_group.mobile_number_2\" \n   *      ], \n   *      \"operations\": \"notEqual\", \n   *    }\n   * }\n   */\n}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/util/dataInterpreter.js"],"names":["fieldDataMapGenerator","arr","obj","forEach","ele","uid","data_type","dynamicObjectGenerator","value","ruleMapGenerator","path","targetfielduid","split","key","length"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,GAA/B,EAAoCC,GAAG,GAAC,EAAxC,EAA2C;AACjDD,EAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAG,IAAE;AAChBF,IAAAA,GAAG,CAACE,GAAG,CAACC,GAAL,CAAH,GAAeD,GAAG,CAACE,SAAJ,KAAkB,OAAlB,GAA4BC,sBAAsB,CAACH,GAAG,CAACI,KAAL,EAAY,EAAZ,CAAlD,GAAoEJ,GAAG,CAACI,KAAvF;AACC,GAFF;AAGC,SAAON,GAAP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AAED,OAAO,SAASO,gBAAT,GAA2B;AAChC,QAAMP,GAAG,GAAC,EAAV;AACAD,EAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAG,IAAE;AAChB,UAAMM,IAAI,GAAGN,GAAG,CAACO,cAAJ,CAAmBC,KAAnB,CAAyB,GAAzB,CAAb;AACA,UAAMC,GAAG,GAAGH,IAAI,CAACA,IAAI,CAACI,MAAL,GAAY,CAAb,CAAhB;AACAZ,IAAAA,GAAG,CAACW,GAAD,CAAH,GAAW,EAAC,GAAGT,GAAJ;AAAS,SAAG;AAACM,QAAAA;AAAD;AAAZ,KAAX;AACA,GAJD;AAKA,SAAOR,GAAP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["export function fieldDataMapGenerator(arr, obj={}){\n\tarr.forEach(ele=>{\n\t\tobj[ele.uid] = ele.data_type === \"group\" ? dynamicObjectGenerator(ele.value, {}) : ele.value;\n  })\n  return obj;\n/**\n * sample output :\n * {\n *    first_name: \"Maulik\",\n *    last_name:\"soni\",\n *    email: \"mauliksoni37@gmail.com\",\n *    age: \"26\",\n *    education_group:{\n *      jr_college: \"K. J. Somaiya Science and Commerce\",\n *      sr_college: \"K. J. Somaiya College Engineering and Information Technology\"\n *    },\n *    address_group:{\n *      residential_address: \"Ghatkopar, Mumbai\",\n *      office_address: \"Kurla, Mumbai\"\n *    },\n *    contact_group:{\n *      residential_phone: 21023904\n *      mobile_phone_group: {\n *        mobile_number_1: 0123456789\n *        mobile_number_2: 9876543210\n *      }\n *    }\n * }\n * contact_group.mobile_phone_group.mobile_number_1\n */\n}\n\nexport function ruleMapGenerator(){\n  const obj={};\n  arr.forEach(ele=>{\n  \tconst path = ele.targetfielduid.split(\".\")\n  \tconst key = path[path.length-1];\n  \tobj[key] = {...ele, ...{path}};\n  })\n  return obj;\n/**\n * sample output :\n * {\n *    office_address:{\n *      \"targetfielduid\": \"address_group.office_address\", \n *      \"opernadFieldUid\": [ \n *        \"address_group.residential_address\" \n *      ], \n *      \"operations\": \"notEqual\", \n *      \"withValue\": \"Ghatkopar, Mumbai\" \n *    }, \n *    mobile_number_1:{ \n *      \"targetfielduid\": \"contact_group.mobile_phone_group.mobile_number_1\", \n *      \"opernadFieldUid\": [ \n *        \"contact_group.mobile_phone_group.mobile_number_2\" \n *      ], \n *      \"operations\": \"notEqual\", \n *    }\n * }\n */\n}\n\n"]},"metadata":{},"sourceType":"module"}