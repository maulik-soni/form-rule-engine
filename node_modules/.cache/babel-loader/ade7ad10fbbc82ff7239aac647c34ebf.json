{"ast":null,"code":"export default function ruleEngine(fieldUID, formData, formRule) {\n  const formFieldDetail = formRule[fieldUID];\n  const {\n    operations,\n    withValue,\n    path\n  } = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  console.log({\n    formFieldDetail,\n    operations,\n    withValue,\n    targetValue\n  });\n  return true;\n}\n\nfunction getValueFromPath(path, sourceData) {\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key => {\n    value = value[key];\n  });\n  return value;\n}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/util/ruleEngine.js"],"names":["ruleEngine","fieldUID","formData","formRule","formFieldDetail","operations","withValue","path","targetValue","getValueFromPath","console","log","sourceData","pathMap","Array","isArray","split","value","forEach","key"],"mappings":"AAAA,eAAe,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAiD;AAC9D,QAAMC,eAAe,GAAGD,QAAQ,CAACF,QAAD,CAAhC;AACA,QAAM;AAACI,IAAAA,UAAD;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MAAgCH,eAAtC;AACA,QAAMI,WAAW,GAAGC,gBAAgB,CAACF,IAAD,EAAOL,QAAP,CAApC;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACP,IAAAA,eAAD;AAAkBC,IAAAA,UAAlB;AAA8BC,IAAAA,SAA9B;AAAyCE,IAAAA;AAAzC,GAAZ;AACA,SAAO,IAAP;AACD;;AAED,SAASC,gBAAT,CAA0BF,IAA1B,EAAgCK,UAAhC,EAA2C;AACzC,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcR,IAAd,IAAsBA,IAAtB,GAA6BA,IAAI,CAACS,KAAL,CAAW,GAAX,CAA7C;AACA,MAAIC,KAAK,GAAGL,UAAZ;AACAC,EAAAA,OAAO,CAACK,OAAR,CAAgBC,GAAG,IAAE;AACnBF,IAAAA,KAAK,GAAGA,KAAK,CAACE,GAAD,CAAb;AACD,GAFD;AAGA,SAAOF,KAAP;AACD","sourcesContent":["export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  const {operations, withValue, path} = formFieldDetail;\n  const targetValue = getValueFromPath(path, formData);\n  console.log({formFieldDetail, operations, withValue, targetValue});\n  return true;\n}\n\nfunction getValueFromPath(path, sourceData){\n  const pathMap = Array.isArray(path) ? path : path.split(\".\");\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[key];\n  })\n  return value;\n}"]},"metadata":{},"sourceType":"module"}