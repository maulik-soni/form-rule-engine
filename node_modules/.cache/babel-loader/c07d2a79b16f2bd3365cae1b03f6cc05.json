{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mauliksoni/Documents/maulik/my-app/src/components/TextField.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction TextField(props) {\n  _s();\n\n  const {\n    uid,\n    type = \"string\",\n    label,\n    errorMessage,\n    required = false,\n    onChange\n  } = props;\n  const [value, setValue] = useState(props.defaultValue || props.value || \"\");\n  const [isValid, checkValidation] = useState(true);\n  let fieldType = \"text\";\n\n  switch (type) {\n    case \"number\":\n      fieldType = \"number\";\n      break;\n\n    case \"string\":\n    case \"text\":\n    default:\n      fieldType = \"text\";\n      break;\n  }\n\n  const onChangeHandler = e => {\n    const value = e.target.value;\n    setValue(value);\n    onChange && onChange(value);\n    checkValidation(!!value);\n  };\n\n  const onBlurHandler = e => {\n    const value = e.target.value;\n    checkValidation(!!value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-sm-12 mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: uid,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: uid,\n      className: \"form-control\",\n      type: fieldType,\n      placeholder: label,\n      value: value,\n      required: !!required,\n      onChange: onChangeHandler,\n      onBlur: onBlurHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invalid-feedback\",\n      style: !isValid ? {\n        \"display\": \"block\"\n      } : {},\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextField, \"kOePsR19NuB9RaGC+hWtTHbR5RM=\");\n\n_c = TextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/my-app/src/components/TextField.jsx"],"names":["useState","TextField","props","uid","type","label","errorMessage","required","onChange","value","setValue","defaultValue","isValid","checkValidation","fieldType","onChangeHandler","e","target","onBlurHandler"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAAA;;AACvB,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA,IAAI,GAAG,QAFH;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,QAAQ,GAAC,KALL;AAMJC,IAAAA;AANI,MAOFN,KAPJ;AASA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACE,KAAK,CAACS,YAAN,IAAsBT,KAAK,CAACO,KAA5B,IAAqC,EAAtC,CAAlC;AACA,QAAM,CAACG,OAAD,EAAUC,eAAV,IAA6Bb,QAAQ,CAAC,IAAD,CAA3C;AAEA,MAAIc,SAAS,GAAG,MAAhB;;AAEA,UAAOV,IAAP;AACE,SAAK,QAAL;AACEU,MAAAA,SAAS,GAAG,QAAZ;AACA;;AACF,SAAK,QAAL;AACA,SAAK,MAAL;AACA;AACEA,MAAAA,SAAS,GAAG,MAAZ;AACA;AARJ;;AAWA,QAAMC,eAAe,GAAEC,CAAD,IAAK;AACzB,UAAMP,KAAK,GAAGO,CAAC,CAACC,MAAF,CAASR,KAAvB;AACAC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,IAAAA,QAAQ,IAAIA,QAAQ,CAACC,KAAD,CAApB;AACAI,IAAAA,eAAe,CAAC,CAAC,CAACJ,KAAH,CAAf;AACD,GALD;;AAOA,QAAMS,aAAa,GAAEF,CAAD,IAAK;AACvB,UAAMP,KAAK,GAAGO,CAAC,CAACC,MAAF,CAASR,KAAvB;AACAI,IAAAA,eAAe,CAAC,CAAC,CAACJ,KAAH,CAAf;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEN,GAAhB;AAAA,gBAAsBE;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,EAAE,EAAEF,GADN;AAEE,MAAA,SAAS,EAAC,cAFZ;AAGE,MAAA,IAAI,EAAEW,SAHR;AAIE,MAAA,WAAW,EAAET,KAJf;AAKE,MAAA,KAAK,EAAEI,KALT;AAME,MAAA,QAAQ,EAAE,CAAC,CAACF,QANd;AAOE,MAAA,QAAQ,EAAEQ,eAPZ;AAQE,MAAA,MAAM,EAAEG;AARV;AAAA;AAAA;AAAA;AAAA,YAFF,EAYGZ,YAAY,iBAAI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,KAAK,EAAE,CAACM,OAAD,GAAW;AAAC,mBAAW;AAAZ,OAAX,GAAkC,EAA3E;AAAA,gBACdN;AADc;AAAA;AAAA;AAAA;AAAA,YAZnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAxDQL,S;;KAAAA,S","sourcesContent":["import { useState } from \"react\";\n\nfunction TextField(props){\n  const {\n    uid,\n    type = \"string\",\n    label,\n    errorMessage,\n    required=false,\n    onChange\n  } = props;\n\n  const [value, setValue] = useState(props.defaultValue || props.value || \"\");\n  const [isValid, checkValidation] = useState(true);\n\n  let fieldType = \"text\";\n\n  switch(type){\n    case \"number\":\n      fieldType = \"number\";\n      break;\n    case \"string\":\n    case \"text\":\n    default:\n      fieldType = \"text\";\n      break;\n  }\n\n  const onChangeHandler=(e)=>{\n    const value = e.target.value;\n    setValue(value);\n    onChange && onChange(value);\n    checkValidation(!!value);\n  }\n\n  const onBlurHandler=(e)=>{\n    const value = e.target.value;\n    checkValidation(!!value);\n  }\n\n  return(\n    <div className=\"col-sm-12 mb-3\">\n      <label htmlFor={uid}>{label}</label>\n      <input\n        id={uid}\n        className=\"form-control\"\n        type={fieldType} \n        placeholder={label}\n        value={value}\n        required={!!required}\n        onChange={onChangeHandler}\n        onBlur={onBlurHandler}\n      />\n      {errorMessage && <div className=\"invalid-feedback\" style={!isValid ? {\"display\": \"block\"} : {}}>\n        {errorMessage}\n      </div>}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}