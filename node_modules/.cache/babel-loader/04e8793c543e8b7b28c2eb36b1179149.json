{"ast":null,"code":"export default function ruleEngine(fieldUID,formData,formRule){var formFieldDetail=formRule[fieldUID];var operations=formFieldDetail.operations,withValue=formFieldDetail.withValue,path=formFieldDetail.path,operandFieldUid=formFieldDetail.operandFieldUid,targetfielduid=formFieldDetail.targetfielduid;var result=true;switch(operations){case\"notEqual\":result=isNotEquals(formData,targetfielduid,operandFieldUid,withValue);break;case\"equal\":result=isEquals(formData,targetfielduid,operandFieldUid,withValue);break;default:result=true;break;}return result;}function isEquals(formData,target,operands,withValue){var value=withValue||getValueFromPath(target,formData);var result=true;operands.forEach(function(operand){var operandValue=getValueFromPath(operand,formData);result=result&&operandValue===value;});return result;}function isNotEquals(formData,target,operands,withValue){var value=withValue||getValueFromPath(target,formData);var result=true;operands.forEach(function(operand){var operandValue=getValueFromPath(operand,formData);result=result&&operandValue!==value;});return result;}function getValueFromPath(path){var sourceData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var pathMap=(Array.isArray(path)?path:path.split(\".\"))||[];var value=sourceData;pathMap.forEach(function(key){value=value[key];});return value;}","map":{"version":3,"sources":["/Users/mauliksoni/Documents/maulik/form-rule-engine/src/util/ruleEngine.js"],"names":["ruleEngine","fieldUID","formData","formRule","formFieldDetail","operations","withValue","path","operandFieldUid","targetfielduid","result","isNotEquals","isEquals","target","operands","value","getValueFromPath","forEach","operand","operandValue","sourceData","pathMap","Array","isArray","split","key"],"mappings":"AAAA,cAAe,SAASA,CAAAA,UAAT,CAAoBC,QAApB,CAA8BC,QAA9B,CAAwCC,QAAxC,CAAiD,CAC9D,GAAMC,CAAAA,eAAe,CAAGD,QAAQ,CAACF,QAAD,CAAhC,CAD8D,GAEvDI,CAAAA,UAFuD,CAESD,eAFT,CAEvDC,UAFuD,CAE3CC,SAF2C,CAESF,eAFT,CAE3CE,SAF2C,CAEhCC,IAFgC,CAESH,eAFT,CAEhCG,IAFgC,CAE1BC,eAF0B,CAESJ,eAFT,CAE1BI,eAF0B,CAETC,cAFS,CAESL,eAFT,CAETK,cAFS,CAI9D,GAAIC,CAAAA,MAAM,CAAG,IAAb,CACA,OAAOL,UAAP,EACE,IAAK,UAAL,CACEK,MAAM,CAAGC,WAAW,CAACT,QAAD,CAAWO,cAAX,CAA2BD,eAA3B,CAA4CF,SAA5C,CAApB,CACA,MACF,IAAK,OAAL,CACEI,MAAM,CAAGE,QAAQ,CAACV,QAAD,CAAWO,cAAX,CAA2BD,eAA3B,CAA4CF,SAA5C,CAAjB,CACA,MACF,QACEI,MAAM,CAAG,IAAT,CACA,MATJ,CAYA,MAAOA,CAAAA,MAAP,CACD,CAED,QAASE,CAAAA,QAAT,CAAkBV,QAAlB,CAA4BW,MAA5B,CAAoCC,QAApC,CAA8CR,SAA9C,CAAwD,CACtD,GAAMS,CAAAA,KAAK,CAAGT,SAAS,EAAIU,gBAAgB,CAACH,MAAD,CAASX,QAAT,CAA3C,CACA,GAAIQ,CAAAA,MAAM,CAAG,IAAb,CACAI,QAAQ,CAACG,OAAT,CAAiB,SAACC,OAAD,CAAW,CAC1B,GAAMC,CAAAA,YAAY,CAAGH,gBAAgB,CAACE,OAAD,CAAUhB,QAAV,CAArC,CACAQ,MAAM,CAAGA,MAAM,EAAKS,YAAY,GAAKJ,KAArC,CACD,CAHD,EAIA,MAAOL,CAAAA,MAAP,CACD,CAED,QAASC,CAAAA,WAAT,CAAqBT,QAArB,CAA+BW,MAA/B,CAAuCC,QAAvC,CAAiDR,SAAjD,CAA2D,CACzD,GAAMS,CAAAA,KAAK,CAAGT,SAAS,EAAIU,gBAAgB,CAACH,MAAD,CAASX,QAAT,CAA3C,CACA,GAAIQ,CAAAA,MAAM,CAAG,IAAb,CACAI,QAAQ,CAACG,OAAT,CAAiB,SAACC,OAAD,CAAW,CAC1B,GAAMC,CAAAA,YAAY,CAAGH,gBAAgB,CAACE,OAAD,CAAUhB,QAAV,CAArC,CACAQ,MAAM,CAAGA,MAAM,EAAKS,YAAY,GAAKJ,KAArC,CACD,CAHD,EAIA,MAAOL,CAAAA,MAAP,CACD,CAED,QAASM,CAAAA,gBAAT,CAA0BT,IAA1B,CAAgD,IAAhBa,CAAAA,UAAgB,2DAAH,EAAG,CAC9C,GAAMC,CAAAA,OAAO,CAAG,CAACC,KAAK,CAACC,OAAN,CAAchB,IAAd,EAAsBA,IAAtB,CAA6BA,IAAI,CAACiB,KAAL,CAAW,GAAX,CAA9B,GAAkD,EAAlE,CACA,GAAIT,CAAAA,KAAK,CAAGK,UAAZ,CACAC,OAAO,CAACJ,OAAR,CAAgB,SAAAQ,GAAG,CAAE,CACnBV,KAAK,CAAGA,KAAK,CAACU,GAAD,CAAb,CACD,CAFD,EAGA,MAAOV,CAAAA,KAAP,CACD","sourcesContent":["export default function ruleEngine(fieldUID, formData, formRule){\n  const formFieldDetail = formRule[fieldUID];\n  const {operations, withValue, path, operandFieldUid, targetfielduid} = formFieldDetail;\n\n  let result = true;\n  switch(operations){\n    case \"notEqual\":\n      result = isNotEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    case \"equal\":\n      result = isEquals(formData, targetfielduid, operandFieldUid, withValue)\n      break;\n    default:\n      result = true\n      break;\n  }\n\n  return result;\n}\n\nfunction isEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  let result = true;\n  operands.forEach((operand)=>{\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && (operandValue === value);\n  })\n  return result;\n}\n\nfunction isNotEquals(formData, target, operands, withValue){\n  const value = withValue || getValueFromPath(target, formData)\n  let result = true;\n  operands.forEach((operand)=>{\n    const operandValue = getValueFromPath(operand, formData);\n    result = result && (operandValue !== value);\n  })\n  return result;\n}\n\nfunction getValueFromPath(path, sourceData = {}){\n  const pathMap = (Array.isArray(path) ? path : path.split(\".\")) || [];\n  let value = sourceData;\n  pathMap.forEach(key=>{\n    value = value[key];\n  })\n  return value;\n}"]},"metadata":{},"sourceType":"module"}